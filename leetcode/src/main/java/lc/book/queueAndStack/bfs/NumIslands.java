package lc.book.queueAndStack.bfs;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

public class NumIslands {
/*
[["1","0","0","1","1","1","0","1","1","0","0","0","0","0","0","0","0","0","0","0"],
["1","0","0","1","1","0","0","1","0","0","0","1","0","1","0","1","0","0","1","0"],
["0","0","0","1","1","1","1","0","1","0","1","1","0","0","0","0","1","0","1","0"],
["0","0","0","1","1","0","0","1","0","0","0","1","1","1","0","0","1","0","0","1"],
["0","0","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0"],
["1","0","0","0","0","1","0","1","0","1","1","0","0","0","0","0","0","1","0","1"],
["0","0","0","1","0","0","0","1","0","1","0","1","0","1","0","1","0","1","0","1"],
["0","0","0","1","0","1","0","0","1","1","0","1","0","1","1","0","1","1","1","0"],
["0","0","0","0","1","0","0","1","1","0","0","0","0","1","0","0","0","1","0","1"],
["0","0","1","0","0","1","0","0","0","0","0","1","0","0","1","0","0","0","1","0"],
["1","0","0","1","0","0","0","0","0","0","0","1","0","0","1","0","1","0","1","0"],
["0","1","0","0","0","1","0","1","0","1","1","0","1","1","1","0","1","1","0","0"],
["1","1","0","1","0","0","0","0","1","0","0","0","0","0","0","1","0","0","0","1"],
["0","1","0","0","1","1","1","0","0","0","1","1","1","1","1","0","1","0","0","0"],
["0","0","1","1","1","0","0","0","1","1","0","0","0","1","0","1","0","0","0","0"],
["1","0","0","1","0","1","0","0","0","0","1","0","0","0","1","0","1","0","1","1"],
["1","0","1","0","0","0","0","0","0","1","0","0","0","1","0","1","0","0","0","0"],
["0","1","1","0","0","0","1","1","1","0","1","0","1","0","1","1","1","1","0","0"],
["0","1","0","0","0","0","1","1","0","0","1","0","1","0","0","1","0","0","1","1"],
["0","0","0","0","0","0","1","1","1","1","0","1","0","0","0","1","1","0","0","0"]]
*/
    public static void main(String[] args) {
        NumIslands instance = new NumIslands();

        char[][] grid = {
                {'1', '1', '0', '0', '1'},
                {'1', '1', '0', '1', '0'},
                {'0', '1', '1', '0', '0'},
                {'0', '1', '0', '1', '1'}
        };
        System.out.println(instance.numIslands(grid));
        grid = new char[][]{
                {'1', '0', '0', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
                {'1', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', '1', '0', '0', '1', '0'},
                {'0', '0', '0', '1', '1', '1', '1', '0', '1', '0', '1', '1', '0', '0', '0', '0', '1', '0', '1', '0'},
                {'0', '0', '0', '1', '1', '0', '0', '1', '0', '0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '1'},
                {'0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'},
                {'1', '0', '0', '0', '0', '1', '0', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '1', '0', '1'},
                {'0', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1'},
                {'0', '0', '0', '1', '0', '1', '0', '0', '1', '1', '0', '1', '0', '1', '1', '0', '1', '1', '1', '0'},
                {'0', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '1'},
                {'0', '0', '1', '0', '0', '1', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '0', '1', '0'},
                {'1', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '1', '0', '1', '0'}, // 30
                {'0', '1', '0', '0', '0', '1', '0', '1', '0', '1', '1', '0', '1', '1', '1', '0', '1', '1', '0', '0'},
                {'1', '1', '0', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1'},
                {'0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '1', '1', '1', '1', '1', '0', '1', '0', '0', '0'},
                {'0', '0', '1', '1', '1', '0', '0', '0', '1', '1', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0'},
                {'1', '0', '0', '1', '0', '1', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', '1', '1'},
                {'1', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0'},
                {'0', '1', '1', '0', '0', '0', '1', '1', '1', '0', '1', '0', '1', '0', '1', '1', '1', '1', '0', '0'},
                {'0', '1', '0', '0', '0', '0', '1', '1', '0', '0', '1', '0', '1', '0', '0', '1', '0', '0', '1', '1'},
                {'0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '0', '0', '0'}, // 58
        };
        System.out.println(instance.numIslands(grid));
    }

    static char _0 = '0';
    static int[][] T_R_B_L = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

    public int numIslands(char[][] grid) {
        int rL = grid.length;
        boolean[][] joined = new boolean[rL][];
        for (int i = 0; i < rL; i++) {
            joined[i] = new boolean[grid[i].length];
        }

        int islandCount = 0;
        Queue<int[]> queue = new LinkedList<>();
        for (int r = 0; r < rL; r++) {
            int cL = grid[r].length;
            for (int c = 0; c < cL; c++) {
                if (grid[r][c] == _0) {
                    continue;
                }
                if (joined[r][c]) {
                    continue;
                }
                islandCount++;
                joined[r][c] = true;
                queue.offer(new int[]{r, c});
                while (!queue.isEmpty()) {
                    int[] cur = queue.poll();

                    for (int[] trbl : T_R_B_L) {
                        int row = cur[0] + trbl[0];
                        int col = cur[1] + trbl[1];
                        if (row < 0 || row == rL || col < 0 || col == cL || grid[row][col] == _0 || joined[row][col]) {
                            continue;
                        }
                        queue.offer(new int[]{row, col});
                        joined[row][col] = true;
                    }
                }
            }
        }
        return islandCount;
    }

//    public int numIslands(char[][] grid) {
//        int num = 0;
//        Set<Coordinate> allCoordinate = new HashSet<>();
//
//        int rL = grid.length;
//        for (int row = 0; row < rL; row++) {
//            int cL = grid[row].length;
//            for (int col = 0; col < cL; col++) {
//                if (grid[row][col] == _0) {
//                    continue;
//                }
//                Coordinate coordinate = Coordinate.of(row, col);
//                if (allCoordinate.contains(coordinate)) {
//                    continue;
//                }
//                num++;
//                Queue<Coordinate> queue = new LinkedList<>();
//                allCoordinate.add(coordinate);
//                queue.offer(coordinate);
//                while (!queue.isEmpty()) {
//                    coordinate = queue.poll();
//                    for (int[] trbl : T_R_B_L) {
//                        int r = coordinate.row + trbl[0];
//                        int c = coordinate.col + trbl[1];
//                        if (r < 0 || r == rL || c < 0 || c == cL || grid[r][c] == _0) {
//                            continue;
//                        }
//                        Coordinate side = Coordinate.of(r, c);
//                        if (allCoordinate.add(side)) {
//                            queue.offer(side);
//                        }
//                    }
//                }
//            }
//        }
//
//        return num;
//    }

//    static class Coordinate {
//        int row;
//        int col;
//
//        public static Map<String, Coordinate> map = new HashMap<>();
//
//        public static Coordinate of(int row, int col) {
//            String s = row + "-" + col;
//            Coordinate coordinate = map.get(s);
//            if (coordinate == null) {
//                coordinate = new Coordinate(row, col);
//                map.put(s, coordinate);
//            }
//            return coordinate;
//        }
//
//        public Coordinate(int row, int col) {
//            this.row = row;
//            this.col = col;
//        }
//    }
}
